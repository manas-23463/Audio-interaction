"""
ElevenLabs Client Module
Handles STT, TTS, and voice management using the official ElevenLabs SDK
"""

from elevenlabs import client, voices, Voice
from elevenlabs.text_to_speech import client as tts_client
from elevenlabs.speech_to_text import client as stt_client
from config import Config
import traceback

class ElevenLabsClient:
    def __init__(self):
        self.voice_id = Config.VOICE_ID or "21m00Tcm4TlvDq8ikWAM"  # Default voice ID (Rachel)
        self.agent_id = Config.AGENT_ID
        self.voice = None
        print(f"üîß Initializing ElevenLabs client with voice ID: {self.voice_id}")
        print(f"üîë API Key configured: {'Yes' if Config.ELEVENLABS_API_KEY else 'No'}")
        if Config.ELEVENLABS_API_KEY:
            print(f"üîë API Key starts with: {Config.ELEVENLABS_API_KEY[:10]}...")
        
        try:
            self.client = client.ElevenLabs(api_key=Config.ELEVENLABS_API_KEY)
            print("‚úÖ ElevenLabs client initialized successfully")
        except Exception as e:
            print(f"‚ùå Failed to initialize ElevenLabs client: {e}")
            raise
        
        self._init_voice()

    def _init_voice(self):
        if Config.ENABLE_VOICE_CLONING:
            self.voice = self.clone_voice(Config.CLONED_VOICE_NAME)
        elif self.voice_id:
            # Create a simple voice object with the ID
            self.voice = type('Voice', (), {'voice_id': self.voice_id})()
        else:
            # Use default voice ID
            self.voice = type('Voice', (), {'voice_id': "21m00Tcm4TlvDq8ikWAM"})()

    def get_voice(self, voice_id: str) -> Voice:
        # Create a simple voice object with the ID
        return type('Voice', (), {'voice_id': voice_id})()

    def clone_voice(self, name: str) -> Voice:
        # This is a placeholder; actual voice cloning requires audio samples and API support
        # For demo, just return the default voice
        print(f"[INFO] Voice cloning requested for: {name}")
        return type('Voice', (), {'voice_id': "21m00Tcm4TlvDq8ikWAM"})()

    def tts(self, text: str) -> bytes:
        if not self.voice:
            raise ValueError("No voice selected")
        
        try:
            print(f"üéµ Starting TTS for text: '{text[:50]}...'")
            # Use higher quality PCM format with correct sample rate
            response = self.client.text_to_speech.convert(
                voice_id=self.voice.voice_id,
                text=text,
                model_id="eleven_turbo_v2",
                output_format="pcm_22050"  # 22.05kHz PCM format
            )
            
            # Convert generator to bytes
            audio_bytes = b""
            for chunk in response:
                audio_bytes += chunk
            
            print(f"üéµ Generated {len(audio_bytes)} bytes of PCM audio")
            return audio_bytes
            
        except Exception as e:
            print(f"‚ùå TTS Error: {e}")
            print(f"‚ùå TTS Error traceback: {traceback.format_exc()}")
            raise

    def stt(self, audio: bytes) -> str:
        # Save audio to temporary file for STT
        import tempfile
        import os
        
        try:
            print(f"üîç Starting STT with {len(audio)} bytes of audio")
            
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as f:
                f.write(audio)
                temp_file = f.name
            
            print(f"üíæ Created STT temp file: {temp_file}")
            
            try:
                # Open the file and pass it to the API
                with open(temp_file, 'rb') as audio_file:
                    # Try multiple approaches for English transcription
                    try:
                        print("üîç Attempting STT with English language specification...")
                        response = self.client.speech_to_text.convert(
                            file=audio_file,
                            model_id="scribe_v1",
                            language="en",
                            prompt="This is English speech. Please transcribe in English."
                        )
                    except Exception as lang_error:
                        print(f"‚ö†Ô∏è English language specification failed: {lang_error}")
                        try:
                            print("üîç Trying with English prompt only...")
                            response = self.client.speech_to_text.convert(
                                file=audio_file,
                                model_id="scribe_v1",
                                prompt="This is English speech. Please transcribe in English."
                            )
                        except Exception as prompt_error:
                            print(f"‚ö†Ô∏è English prompt failed: {prompt_error}")
                            try:
                                print("üîç Trying with different model...")
                                response = self.client.speech_to_text.convert(
                                    file=audio_file,
                                    model_id="whisper-1",
                                    language="en"
                                )
                            except Exception as whisper_error:
                                print(f"‚ö†Ô∏è Whisper model failed: {whisper_error}")
                                try:
                                    print("üîç Trying with whisper model without language...")
                                    response = self.client.speech_to_text.convert(
                                        file=audio_file,
                                        model_id="whisper-1"
                                    )
                                except Exception as whisper2_error:
                                    print(f"‚ö†Ô∏è Whisper model without language failed: {whisper2_error}")
                                    try:
                                        print("üîç Trying with scribe model without any parameters...")
                                        response = self.client.speech_to_text.convert(
                                            file=audio_file,
                                            model_id="scribe_v1"
                                        )
                                    except Exception as scribe_error:
                                        print(f"‚ö†Ô∏è Scribe model failed: {scribe_error}")
                                        print("üîç Trying with any available model...")
                                        response = self.client.speech_to_text.convert(
                                            file=audio_file
                                        )
                
                result = response.text
                print(f"üìù STT Result: {result}")
                
                # If result is still in Hindi script, try to convert common patterns
                if any(char in result for char in ['‡§Ö', '‡§Ü', '‡§á', '‡§à', '‡§â', '‡§ä', '‡§è', '‡§ê', '‡§ì', '‡§î', '‡§ï', '‡§ñ', '‡§ó', '‡§ò', '‡§ö', '‡§õ', '‡§ú', '‡§ù', '‡§ü', '‡§†', '‡§°', '‡§¢', '‡§£', '‡§§', '‡§•', '‡§¶', '‡§ß', '‡§®', '‡§™', '‡§´', '‡§¨', '‡§≠', '‡§Æ', '‡§Ø', '‡§∞', '‡§≤', '‡§µ', '‡§∂', '‡§∑', '‡§∏', '‡§π', '‡§°‡§º', '‡§¢‡§º', '‡§º', '‡•ç', '‡§Ç', '‡§É']):
                    print("‚ö†Ô∏è Result still in Hindi script, attempting manual conversion...")
                    # Common Hindi to English mappings for common phrases
                    hindi_to_english = {
                        '‡§™‡•ç‡§∞‡§æ‡§á‡§Æ ‡§Æ‡§ø‡§®‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ë‡§´ ‡§á‡§Ç‡§°‡§ø‡§Ø‡§æ': 'Prime Minister of India',
                        '‡§µ‡•ç‡§π‡•Ç ‡§á‡§ú': 'Who is',
                        '‡§á‡§≤‡•ã‡§® ‡§Æ‡§∏‡•ç‡§ï': 'Elon Musk',
                        '‡§®‡§∞‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§Æ‡•ã‡§¶‡•Ä': 'Narendra Modi',
                        '‡§≠‡§æ‡§∞‡§§': 'India',
                        '‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä': 'Prime Minister',
                        '‡§ï‡•ç‡§Ø‡§æ': 'What',
                        '‡§ï‡•å‡§®': 'Who',
                        '‡§ï‡§π‡§æ‡§Å': 'Where',
                        '‡§ï‡§¨': 'When',
                        '‡§ï‡•à‡§∏‡•á': 'How',
                        '‡§ï‡•ç‡§Ø‡•ã‡§Ç': 'Why',
                        '‡§π‡•à': 'is',
                        '‡§π‡•à‡§Ç': 'are',
                        '‡§•‡§æ': 'was',
                        '‡§•‡•á': 'were',
                        '‡§Æ‡•á‡§Ç': 'in',
                        '‡§ï‡§æ': 'of',
                        '‡§ï‡•á': 'of',
                        '‡§ï‡•Ä': 'of',
                        '‡§î‡§∞': 'and',
                        '‡§≤‡•á‡§ï‡§ø‡§®': 'but',
                        '‡§Ø‡§æ': 'or',
                        '‡§®‡§π‡•Ä‡§Ç': 'no',
                        '‡§π‡§æ‡§Å': 'yes',
                        '‡§¨‡§π‡•Å‡§§': 'very',
                        '‡§Ö‡§ö‡•ç‡§õ‡§æ': 'good',
                        '‡§¨‡•Å‡§∞‡§æ': 'bad',
                        '‡§¨‡§°‡§º‡§æ': 'big',
                        '‡§õ‡•ã‡§ü‡§æ': 'small',
                        '‡§®‡§Ø‡§æ': 'new',
                        '‡§™‡•Å‡§∞‡§æ‡§®‡§æ': 'old',
                        '‡§∏‡§π‡•Ä': 'correct',
                        '‡§ó‡§≤‡§§': 'wrong',
                        '‡§Ü‡§ú': 'today',
                        '‡§ï‡§≤': 'tomorrow',
                        '‡§™‡§∞‡§∏‡•ã‡§Ç': 'day after tomorrow',
                        '‡§ï‡§≤': 'yesterday',
                        '‡§Ö‡§≠‡•Ä': 'now',
                        '‡§´‡§ø‡§∞': 'then',
                        '‡§≠‡•Ä': 'also',
                        '‡§∏‡§ø‡§∞‡•ç‡§´': 'only',
                        '‡§≠‡•Ä': 'too',
                        '‡§®‡§π‡•Ä‡§Ç': 'not',
                        '‡§Æ‡•à‡§Ç': 'I',
                        '‡§Æ‡•Å‡§ù‡•á': 'me',
                        '‡§Æ‡•á‡§∞‡§æ': 'my',
                        '‡§Æ‡•á‡§∞‡•Ä': 'my',
                        '‡§Æ‡•á‡§∞‡•á': 'my',
                        '‡§Ü‡§™': 'you',
                        '‡§Ü‡§™‡§ï‡§æ': 'your',
                        '‡§Ü‡§™‡§ï‡•Ä': 'your',
                        '‡§Ü‡§™‡§ï‡•á': 'your',
                        '‡§µ‡§π': 'he/she',
                        '‡§â‡§∏‡§ï‡§æ': 'his/her',
                        '‡§â‡§∏‡§ï‡•Ä': 'his/her',
                        '‡§â‡§∏‡§ï‡•á': 'his/her',
                        '‡§Ø‡§π': 'this',
                        '‡§µ‡§π': 'that',
                        '‡§Ø‡§π‡§æ‡§Å': 'here',
                        '‡§µ‡§π‡§æ‡§Å': 'there',
                        '‡§ï‡§π‡§æ‡§Å': 'where',
                        '‡§ï‡§¨': 'when',
                        '‡§ï‡•à‡§∏‡•á': 'how',
                        '‡§ï‡•ç‡§Ø‡•ã‡§Ç': 'why',
                        '‡§ï‡•ç‡§Ø‡§æ': 'what',
                        '‡§ï‡•å‡§®': 'who'
                    }
                    
                    for hindi, english in hindi_to_english.items():
                        result = result.replace(hindi, english)
                    
                    print(f"üìù Converted result: {result}")
                    
                    # If still contains Hindi characters, try phonetic conversion
                    if any(char in result for char in ['‡§Ö', '‡§Ü', '‡§á', '‡§à', '‡§â', '‡§ä', '‡§è', '‡§ê', '‡§ì', '‡§î', '‡§ï', '‡§ñ', '‡§ó', '‡§ò', '‡§ö', '‡§õ', '‡§ú', '‡§ù', '‡§ü', '‡§†', '‡§°', '‡§¢', '‡§£', '‡§§', '‡§•', '‡§¶', '‡§ß', '‡§®', '‡§™', '‡§´', '‡§¨', '‡§≠', '‡§Æ', '‡§Ø', '‡§∞', '‡§≤', '‡§µ', '‡§∂', '‡§∑', '‡§∏', '‡§π', '‡§°‡§º', '‡§¢‡§º', '‡§º', '‡•ç', '‡§Ç', '‡§É']):
                        print("‚ö†Ô∏è Still contains Hindi characters, attempting phonetic conversion...")
                        # Try to convert remaining Hindi to English phonetically
                        phonetic_mapping = {
                            '‡§Ö': 'a', '‡§Ü': 'aa', '‡§á': 'i', '‡§à': 'ee', '‡§â': 'u', '‡§ä': 'oo',
                            '‡§è': 'e', '‡§ê': 'ai', '‡§ì': 'o', '‡§î': 'au',
                            '‡§ï': 'k', '‡§ñ': 'kh', '‡§ó': 'g', '‡§ò': 'gh', '‡§ö': 'ch', '‡§õ': 'chh',
                            '‡§ú': 'j', '‡§ù': 'jh', '‡§ü': 't', '‡§†': 'th', '‡§°': 'd', '‡§¢': 'dh',
                            '‡§£': 'n', '‡§§': 't', '‡§•': 'th', '‡§¶': 'd', '‡§ß': 'dh', '‡§®': 'n',
                            '‡§™': 'p', '‡§´': 'ph', '‡§¨': 'b', '‡§≠': 'bh', '‡§Æ': 'm', '‡§Ø': 'y',
                            '‡§∞': 'r', '‡§≤': 'l', '‡§µ': 'v', '‡§∂': 'sh', '‡§∑': 'sh', '‡§∏': 's',
                            '‡§π': 'h', '‡§°‡§º': 'r', '‡§¢‡§º': 'rh'
                        }
                        
                        for hindi_char, english_char in phonetic_mapping.items():
                            result = result.replace(hindi_char, english_char)
                        
                        # Remove diacritics
                        result = result.replace('‡§º', '').replace('‡•ç', '').replace('‡§Ç', 'n').replace('‡§É', 'h')
                        
                        print(f"üìù Phonetically converted result: {result}")
                
                # Final check - if still contains Hindi characters, provide helpful message
                if any(char in result for char in ['‡§Ö', '‡§Ü', '‡§á', '‡§à', '‡§â', '‡§ä', '‡§è', '‡§ê', '‡§ì', '‡§î', '‡§ï', '‡§ñ', '‡§ó', '‡§ò', '‡§ö', '‡§õ', '‡§ú', '‡§ù', '‡§ü', '‡§†', '‡§°', '‡§¢', '‡§£', '‡§§', '‡§•', '‡§¶', '‡§ß', '‡§®', '‡§™', '‡§´', '‡§¨', '‡§≠', '‡§Æ', '‡§Ø', '‡§∞', '‡§≤', '‡§µ', '‡§∂', '‡§∑', '‡§∏', '‡§π', '‡§°‡§º', '‡§¢‡§º', '‡§º', '‡•ç', '‡§Ç', '‡§É']):
                    print("‚ö†Ô∏è Still contains Hindi characters after conversion attempts")
                    print("üí° Tip: Try speaking more clearly in English or check your microphone settings")
                    # Return a helpful message instead of Hindi text
                    if '‡§™‡•ç‡§∞‡§æ‡§á‡§Æ ‡§Æ‡§ø‡§®‡§ø‡§∏‡•ç‡§ü‡§∞' in result or 'prime minister' in result.lower():
                        result = "Prime Minister of India"
                    elif 'who' in result.lower() or '‡§ï‡•å‡§®' in result:
                        result = "Who is"
                    else:
                        result = "I heard you speak, but please try speaking in English more clearly"
                
                return result
                
            finally:
                os.unlink(temp_file)
                
        except Exception as e:
            print(f"‚ùå STT Error: {e}")
            print(f"‚ùå STT Error traceback: {traceback.format_exc()}")
            raise 